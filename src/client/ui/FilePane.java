/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client.ui;

import client.IBusinessLogic;
import common.AuthorizationResult;
import common.CloudFile;
import common.DeleteFileResult;
import static common.DeleteFileResult.unAuthorized;
import common.FileDirectoryResult;
import common.FileDirectoryResult.FileDirectoryStatus;
import static common.LoginResult.OK;
import static common.LoginResult.wrong;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.util.ArrayList;

import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.JTree;
import javax.swing.LayoutStyle;
import javax.swing.ListSelectionModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author yzj
 */
public class FilePane extends javax.swing.JPanel {
//    private class UserObserverable extends Observable{
//        private String userID;
//        
//        private String getUserID() {
//            return userID;
//        }
//
//        private void setUserID(String userID) {
//            this.userID = userID;
//            setChanged();
//            notifyObservers();
//        }
//    }
//    
//    private class UserObserver implements Observer{
//
//        @Override
//        public void update(Observable o, Object arg) {
//            UserObserverable currentUser=(UserObserverable) o;
//            String userID=currentUser.getUserID();
//            if (!userID.equals(m_Business.getUser().getUserID())){
//                uploadFileButton.setEnabled(false);
//                deleteFileButton.setEnabled(false);
//                renameFileButton.setEnabled(false);
//                authorizationButton.setEnabled(false);
//            }
//        }
//        
//    }

    private final JFrame m_MainFrame;
    private final IBusinessLogic m_Business;
    private CloudFile currentFile;
    private String targetID;
    private FileTableModel fileTableModel;
    
    public String getTargetID() {
        return targetID;
    }

    public void setTargetID(String targetID) {
        this.targetID = targetID;
        getDirectory(targetID);
    }

    /**
     * Creates new form FileContentPane
     * @param mainFrame
     * @param business
     */
    public FilePane(JFrame mainFrame, IBusinessLogic business) {
        m_MainFrame = mainFrame;
        m_Business = business;
        currentFile = null;
        targetID = m_Business.getUser().getUserID();
        fileTableModel = new FileTableModel(new ArrayList<CloudFile>());
        
        try {
            FileDirectoryResult result=m_Business.getDirectory(targetID);
            FileDirectoryStatus status=result.getResult();
            if (status.equals(FileDirectoryStatus.OK))
                fileTableModel= new FileTableModel(result.getFileDirectory());
        } catch (IOException e) {
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileButtonPane = new JPanel();
        uploadFileButton = new JButton();
        downloadFileButton = new JButton();
        deleteFileButton = new JButton();
        renameFileButton = new JButton();
        authorizationButton = new JButton();
        fileSplitPane = new JSplitPane();
        selectTypeScroll = new JScrollPane();
        fileTree = new JTree();
        fileInfoScroll = new JScrollPane();
        fileInfoTable = new JTable();

        FormListener formListener = new FormListener();

        setForeground(new Color(240, 240, 240));
        setFont(new Font("微软雅黑", 0, 12)); // NOI18N

        fileButtonPane.setMaximumSize(new Dimension(32767, 50));
        fileButtonPane.setMinimumSize(new Dimension(404, 50));

        uploadFileButton.setFont(new Font("微软雅黑", 0, 14)); // NOI18N
        uploadFileButton.setText("上传");
        uploadFileButton.setActionCommand("JButton1");
        uploadFileButton.setBorder(null);
        uploadFileButton.setBorderPainted(false);
        uploadFileButton.setMaximumSize(new Dimension(30, 20));
        uploadFileButton.setMinimumSize(new Dimension(30, 20));
        uploadFileButton.addActionListener(formListener);

        downloadFileButton.setFont(new Font("微软雅黑", 0, 14)); // NOI18N
        downloadFileButton.setText("下载");
        downloadFileButton.setActionCommand("JButton1");
        downloadFileButton.setBorder(null);
        downloadFileButton.setBorderPainted(false);
        downloadFileButton.setMaximumSize(new Dimension(30, 20));
        downloadFileButton.setMinimumSize(new Dimension(30, 20));
        downloadFileButton.setPreferredSize(new Dimension(30, 20));
        downloadFileButton.addActionListener(formListener);

        deleteFileButton.setFont(new Font("微软雅黑", 0, 14)); // NOI18N
        deleteFileButton.setText("删除");
        deleteFileButton.addActionListener(formListener);

        renameFileButton.setFont(new Font("微软雅黑", 0, 14)); // NOI18N
        renameFileButton.setText("重命名");
        renameFileButton.addActionListener(formListener);

        authorizationButton.setFont(new Font("微软雅黑", 0, 14)); // NOI18N
        authorizationButton.setText("修改权限");
        authorizationButton.addActionListener(formListener);

        GroupLayout fileButtonPaneLayout = new GroupLayout(fileButtonPane);
        fileButtonPane.setLayout(fileButtonPaneLayout);
        fileButtonPaneLayout.setHorizontalGroup(fileButtonPaneLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(fileButtonPaneLayout.createSequentialGroup()
                .addComponent(uploadFileButton, GroupLayout.PREFERRED_SIZE, 70, GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(downloadFileButton, GroupLayout.PREFERRED_SIZE, 70, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteFileButton, GroupLayout.PREFERRED_SIZE, 70, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(renameFileButton)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(authorizationButton)
                .addContainerGap())
        );
        fileButtonPaneLayout.setVerticalGroup(fileButtonPaneLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(fileButtonPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fileButtonPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(uploadFileButton, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                    .addComponent(downloadFileButton, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteFileButton, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                    .addComponent(renameFileButton, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                    .addComponent(authorizationButton, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        fileSplitPane.setBackground(new Color(255, 255, 255));
        fileSplitPane.setContinuousLayout(true);

        selectTypeScroll.setMinimumSize(new Dimension(30, 30));

        fileTree.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        DefaultMutableTreeNode treeNode1 = new DefaultMutableTreeNode("全部文件");
        DefaultMutableTreeNode treeNode2 = new DefaultMutableTreeNode("文档");
        treeNode1.add(treeNode2);
        treeNode2 = new DefaultMutableTreeNode("图片");
        treeNode1.add(treeNode2);
        treeNode2 = new DefaultMutableTreeNode("视频");
        treeNode1.add(treeNode2);
        treeNode2 = new DefaultMutableTreeNode("音乐");
        treeNode1.add(treeNode2);
        treeNode2 = new DefaultMutableTreeNode("其他");
        treeNode1.add(treeNode2);
        fileTree.setModel(new DefaultTreeModel(treeNode1));
        fileTree.setRowHeight(20);
        fileTree.setScrollsOnExpand(false);
        selectTypeScroll.setViewportView(fileTree);

        fileSplitPane.setLeftComponent(selectTypeScroll);

        fileInfoScroll.setBackground(new Color(255, 255, 255));
        fileInfoScroll.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        fileInfoScroll.getViewport().setBackground(Color.WHITE);

        fileInfoTable.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        fileInfoTable.setModel(fileTableModel);
        fileInfoTable.getTableHeader().setFont(new Font("微软雅黑", 0, 12));
        fileInfoTable.setRowHeight(20);
        fileInfoTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        fileInfoTable.setShowHorizontalLines(false);
        fileInfoTable.setShowVerticalLines(false);
        fileInfoTable.addMouseListener(formListener);
        fileInfoScroll.setViewportView(fileInfoTable);

        fileSplitPane.setRightComponent(fileInfoScroll);

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(fileButtonPane, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
            .addComponent(fileSplitPane, GroupLayout.DEFAULT_SIZE, 608, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(fileButtonPane, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileSplitPane, GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE))
        );
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements ActionListener, MouseListener {
        FormListener() {}
        public void actionPerformed(ActionEvent evt) {
            if (evt.getSource() == uploadFileButton) {
                FilePane.this.uploadFileButtonActionPerformed(evt);
            }
            else if (evt.getSource() == downloadFileButton) {
                FilePane.this.downloadFileButtonActionPerformed(evt);
            }
            else if (evt.getSource() == deleteFileButton) {
                FilePane.this.deleteFileButtonActionPerformed(evt);
            }
            else if (evt.getSource() == renameFileButton) {
                FilePane.this.renameFileButtonActionPerformed(evt);
            }
            else if (evt.getSource() == authorizationButton) {
                FilePane.this.authorizationButtonActionPerformed(evt);
            }
        }

        public void mouseClicked(MouseEvent evt) {
            if (evt.getSource() == fileInfoTable) {
                FilePane.this.fileInfoTableMouseClicked(evt);
            }
        }

        public void mouseEntered(MouseEvent evt) {
        }

        public void mouseExited(MouseEvent evt) {
        }

        public void mousePressed(MouseEvent evt) {
        }

        public void mouseReleased(MouseEvent evt) {
        }
    }// </editor-fold>//GEN-END:initComponents

    private void uploadFileButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_uploadFileButtonActionPerformed
        UploadFileWindow uploadWindow = new UploadFileWindow(m_MainFrame, m_Business);
        getDirectory(targetID);
    }//GEN-LAST:event_uploadFileButtonActionPerformed

    private void downloadFileButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_downloadFileButtonActionPerformed


    }//GEN-LAST:event_downloadFileButtonActionPerformed

    private void deleteFileButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_deleteFileButtonActionPerformed
        try {
            if (currentFile==null){
                JOptionPane.showMessageDialog(m_MainFrame, "请选择文件", null, JOptionPane.WARNING_MESSAGE);
                return;
            }
            DeleteFileResult result = m_Business.deleteFile(currentFile);
            switch (result) {
                case OK:
                    JOptionPane.showMessageDialog(m_MainFrame, "删除成功", null, JOptionPane.INFORMATION_MESSAGE);
                    getDirectory(targetID);
                    break;
                case unAuthorized:
                    JOptionPane.showMessageDialog(m_MainFrame, "您未登录，请重新登录", null, JOptionPane.WARNING_MESSAGE);
                    break;
                case wrong:
                    JOptionPane.showMessageDialog(m_MainFrame, "文件不存在，请重新选择", null, JOptionPane.WARNING_MESSAGE);
                    getDirectory(targetID);
                    break;
                default:
                    JOptionPane.showMessageDialog(m_MainFrame, "未知错误", null, JOptionPane.ERROR_MESSAGE);
                    break;
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(m_MainFrame, "网络错误", null, JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_deleteFileButtonActionPerformed

    private void renameFileButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_renameFileButtonActionPerformed
//        try {
//            if (currentFile==null){
//                JOptionPane.showMessageDialog(m_MainFrame, "请选择文件", null, JOptionPane.WARNING_MESSAGE);
//                return;
//            }
//            RenameFileResult result = m_Business.renameFile(currentFile);
//            switch (result) {
//                case OK:
//                    JOptionPane.showMessageDialog(m_MainFrame, "删除", null, JOptionPane.INFORMATION_MESSAGE);
//                    break;
//                case unAuthorized:
//                    JOptionPane.showMessageDialog(m_MainFrame, "您未登录，请重新登录", null, JOptionPane.WARNING_MESSAGE);
//                    break;
//                case wrong:
//                    JOptionPane.showMessageDialog(m_MainFrame, "文件不存在，请重新选择", null, JOptionPane.WARNING_MESSAGE);
//                    break;
//                default:
//                    JOptionPane.showMessageDialog(m_MainFrame, "未知错误", null, JOptionPane.ERROR_MESSAGE);
//                    break;
//            }
//        } catch (IOException e) {
//            JOptionPane.showMessageDialog(m_MainFrame, "网络错误", null, JOptionPane.ERROR_MESSAGE);
//        }
    }//GEN-LAST:event_renameFileButtonActionPerformed

    private void authorizationButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_authorizationButtonActionPerformed
//         try {
//            if (currentFile==null){
//                JOptionPane.showMessageDialog(m_MainFrame, "请选择文件", null, JOptionPane.WARNING_MESSAGE);
//                return;
//            }
//            AuthorizationResult result = m_Business.set(currentFile);
//            switch (result) {
//                case OK:
//                    JOptionPane.showMessageDialog(m_MainFrame, "删除成功", null, JOptionPane.INFORMATION_MESSAGE);
//                    getDirectory(targetID);
//                    break;
//                case unAuthorized:
//                    JOptionPane.showMessageDialog(m_MainFrame, "您未登录，请重新登录", null, JOptionPane.WARNING_MESSAGE);
//                    break;
//                case wrong:
//                    JOptionPane.showMessageDialog(m_MainFrame, "文件不存在，请重新选择", null, JOptionPane.WARNING_MESSAGE);
//                    getDirectory(targetID);
//                    break;
//                default:
//                    JOptionPane.showMessageDialog(m_MainFrame, "未知错误", null, JOptionPane.ERROR_MESSAGE);
//                    break;
//            }
//        } catch (IOException e) {
//            JOptionPane.showMessageDialog(m_MainFrame, "网络错误", null, JOptionPane.ERROR_MESSAGE);
//        }

    }//GEN-LAST:event_authorizationButtonActionPerformed

    private void fileInfoTableMouseClicked(MouseEvent evt) {//GEN-FIRST:event_fileInfoTableMouseClicked
        FileTableModel fileTableModel = (FileTableModel) fileInfoTable.getModel();
        int rowIndex = fileInfoTable.getSelectedRow();
        if (rowIndex!=-1)
            currentFile= fileTableModel.getValueAt(rowIndex);
        else
            currentFile=null;
    }//GEN-LAST:event_fileInfoTableMouseClicked

    
    public void getDirectory(String targetID) {
        FileDirectoryResult result;
        try {
            result=m_Business.getDirectory(targetID);
            FileDirectoryStatus status=result.getResult();
            switch(status){
            case OK:
                ArrayList<CloudFile> directory=result.getFileDirectory();
                fileTableModel.setDirectory(directory);
                fileInfoTable.setModel(fileTableModel);
                break;
            case unAuthorized:
                JOptionPane.showMessageDialog(m_MainFrame, "您未登录，请重新登录", null, JOptionPane.WARNING_MESSAGE);
                    break;
            case wrong:
                JOptionPane.showMessageDialog(m_MainFrame, "用户不存在，请重新输入", null, JOptionPane.WARNING_MESSAGE);
                break;
            default:
                JOptionPane.showMessageDialog(m_MainFrame, "未知错误", null, JOptionPane.ERROR_MESSAGE);
                break;
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(m_MainFrame, "网络错误", null, JOptionPane.ERROR_MESSAGE);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    JButton authorizationButton;
    JButton deleteFileButton;
    JButton downloadFileButton;
    JPanel fileButtonPane;
    JScrollPane fileInfoScroll;
    JTable fileInfoTable;
    JSplitPane fileSplitPane;
    JTree fileTree;
    JButton renameFileButton;
    JScrollPane selectTypeScroll;
    JButton uploadFileButton;
    // End of variables declaration//GEN-END:variables
}
